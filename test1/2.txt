program link ;
{$m 10000000}

const
  inf = 'link.in' ;
  ouf = 'link.out' ;
  maxn = 500000 ;
  maxlog = 20 ;

var
  ie, stack, low, dep, a, p : array [1 .. maxn] of longint ;
  f : array [1 .. maxn, 0 .. maxlog] of longint ;
  c, g : array [1 .. maxn shl 1] of longint ;
  ic : array [1 .. maxn] of boolean ;
  ans, n, len : longint ;

procedure int ;
var i, k : longint ;
begin ; read(n, len) ;
  for i := 1 to n do begin ;
    read(k) ; read(p[k]) ;
  end ;
end ;

procedure main ;
var i, k, t, m, h : longint ;

  function update(x : longint) : longint ;
  begin ; while x > m do x := x - m ;
    update := x ;
  end ;

  procedure dfs(x : longint) ;
  var v : longint ;
  begin ; k := k + 1 ; dep[x] := k ; low[x] := k ;
    t := t + 1 ; stack[t] := x ;
    a[x] := t ; v := p[x] ;
    if a[v] = 0 then begin ;
      dfs(v) ; if low[v] < low[x] then low[x] := low[v] ;
    end ;
    else if dep[v] < low[x] then low[x] := dep[v] ;
    if low[x] = dep[x] then
      if a[x] = t then t := t - 1
      else begin ;
        for v := a[x] to t do ic[stack[v]] := true ;
        t := a[x] - 1 ;
      end ;
  end ;

  procedure solvecircle ;
  var u, i, j, k, cost, log, q : longint ;
  begin ; fillchar(ie, sizeof(ie), 0) ; k := a[c[1]] ;
    for i := m + 1 to 2 * m do c[i] := c[i - m] ;
    for i := 1 to 2 * m do begin ;
      k := k + 1 ;
      if a[c[i]] < k then k := a[c[i]] ;
      ie[i] := ord(k <= len) ;
    end ;
    for i := 1 to m do ie[i] := ie[i] or ie[i + m] ;
    k := 0 ; for i := 1 to m do k := k + ie[i] ;
    if k = m then exit ; k := 1 ; fillchar(g, sizeof(g), 0) ;
    if m <= len then begin ; ans := ans + 1 ; exit ; end ;
    for i := 2 * m downto 1 do
      if ie[i] = 0 then k := i
        else g[i] := k - i ;
    for i := 1 to m do f[i, 0] := len + g[update(i + len)] ;
    k := len ; log := 0 ; cost := maxlongint ;
    while k < m do begin ;
      log := log + 1 ;
      for i := 1 to m do
        f[i, log] := f[i, log - 1] + f[update(i + f[i, log - 1]), log - 1] ;
      k := k shl 1 ;
    end ;
    for i := 1 to m do
      if ie[i] = 0 then begin ;
        u := i ; k := m ; q := 0 ;
        for j := log downto 0 do
          if f[u, j] <= k then begin ;
            q := q + (1 shl j) ;
            k := k - f[u, j] ;
            u := update(u + f[u, j]) ;
          end ;
        if k > 0 then q := q + 1 ;
        if q < cost then cost := q ;
      end ;
    ans := ans + cost ;
  end ; begin ;
  k := 0 ; t := 0 ;
  for i := 1 to n do ie[p[i]] := ie[p[i]] + 1 ;
  for i := 1 to n do if a[i] = 0 then dfs(i) ;
  for i := 1 to n do a[i] := len + 1 ;
  t := 0 ; a[1] := 0 ; h := 0 ;
  for i := 1 to n do
    if ie[i] = 0 then begin ;
      t := t + 1 ; stack[t] := i ;
      if i <> 1 then begin ;
        a[i] := 1 ; ans := ans + 1 ;
      end ;
    end ;
  while h < t do begin ;
    h := h + 1 ; k := stack[h] ; dec(ie[p[k]]) ;
    if a[k] > len then begin ;
      a[k] := 1 ; ans := ans + 1 ;
    end ;
    if a[p[k]] > a[k] + 1
      then a[p[k]] := a[k] + 1 ;
    if (ie[p[k]] = 0) and not ic[p[k]] then begin ;
      t := t + 1 ; stack[t] := p[k] ;
    end ;
  end ;
  for i := 1 to n do
    if ic[i] then begin ;
      k := i ; m := 0 ;
      repeat
        m := m + 1 ; c[m] := k ;
        k := p[k] ; ic[k] := false ;
      until k = i ;
      solvecircle ;
    end ;
end ; begin ;
  assign(input, inf) ;
  assign(output, ouf) ;
  reset(input) ;
  rewrite(output) ;
  int ; main ;
  writeln(ans) ;
  close(input) ;
  close(output) ;
end .